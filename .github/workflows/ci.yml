name: HN Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: hn-interview-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Deploy Infrastructure to AWS
        run: |
          cd infra
          terraform init

          # Check if ECR repository already exists and import it
          if aws ecr describe-repositories --repository-names hn-interview-app --region us-east-1 >/dev/null 2>&1; then
            echo "ECR repository already exists, importing into Terraform state..."
            terraform import aws_ecr_repository.app hn-interview-app || true
          fi

          # Force cleanup of old security group and its dependencies
          if aws ec2 describe-security-groups --group-ids sg-0e3fb8a1b2b8379a8 --region us-east-1 >/dev/null 2>&1; then
            echo "Force cleaning up old security group..."
            
            # Find and detach network interfaces
            NETWORK_INTERFACES=$(aws ec2 describe-network-interfaces --filters "Name=group-id,Values=sg-0e3fb8a1b2b8379a8" --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text --region us-east-1)
            if [ ! -z "$NETWORK_INTERFACES" ]; then
              echo "Detaching network interfaces: $NETWORK_INTERFACES"
              for eni in $NETWORK_INTERFACES; do
                aws ec2 detach-network-interface --attachment-id $(aws ec2 describe-network-interfaces --network-interface-ids $eni --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text --region us-east-1) --force --region us-east-1 || true
                aws ec2 delete-network-interface --network-interface-id $eni --region us-east-1 || true
              done
            fi
            
            # Now try to delete the security group
            aws ec2 delete-security-group --group-id sg-0e3fb8a1b2b8379a8 --region us-east-1 || true
          fi

          terraform plan -out=tfplan
          terraform apply tfplan
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
